#!/usr/bin/env python3
"""
Secure configuration setup for Meditation AI Alignment Sprint
Run this script to set up your OpenAI API key and other configuration.
"""

import os
import sys
from pathlib import Path

def create_env_file():
    """Create a .env file with user's API key."""
    
    print("üîß Meditation AI Alignment Sprint - Configuration Setup")
    print("=" * 60)
    print()
    print("This script will help you set up your OpenAI API key securely.")
    print("Your API key will be stored in a .env file that won't be committed to git.")
    print()
    
    # Check if .env already exists
    env_path = Path(".env")
    if env_path.exists():
        overwrite = input("‚ö†Ô∏è  A .env file already exists. Overwrite it? (y/n): ").lower().strip()
        if overwrite != 'y':
            print("Setup cancelled.")
            return False
    
    # Get API key from user
    print("Please enter your OpenAI API key.")
    print("You can find it at: https://platform.openai.com/api-keys")
    print()
    
    # Use getpass for hidden input (more secure)
    try:
        import getpass
        api_key = getpass.getpass("OpenAI API Key: ").strip()
    except ImportError:
        api_key = input("OpenAI API Key: ").strip()
    
    if not api_key:
        print("‚ùå No API key provided. Setup cancelled.")
        return False
    
    # Validate API key format (basic check)
    if not api_key.startswith('sk-'):
        print("‚ö†Ô∏è  Warning: This doesn't look like a valid OpenAI API key.")
        print("   OpenAI API keys typically start with 'sk-'")
        proceed = input("   Proceed anyway? (y/n): ").lower().strip()
        if proceed != 'y':
            print("Setup cancelled.")
            return False
    
    # Create .env file content
    env_content = f"""# Environment variables for Meditation AI Alignment Sprint
# Generated by setup_config.py - DO NOT COMMIT TO GIT

# OpenAI API Configuration
OPENAI_API_KEY={api_key}

# Model Configuration
BASE_MODEL=gpt-4o-mini
CRITIC_MODEL=gpt-4o

# Alignment Parameters
PREFERENCE_PAIRS_PER_TOPIC=100
SAFETY_THRESHOLD=0.9
QUALITY_THRESHOLD=0.7

# Logging
LOG_LEVEL=INFO
"""
    
    # Write .env file
    try:
        with open(".env", "w") as f:
            f.write(env_content)
        
        print("‚úÖ Configuration saved to .env file")
        
        # Set restrictive permissions on .env file (Unix/Linux/Mac)
        if os.name != 'nt':  # Not Windows
            os.chmod(".env", 0o600)  # Read/write for owner only
            print("‚úÖ Set secure file permissions on .env")
        
    except Exception as e:
        print(f"‚ùå Error writing .env file: {e}")
        return False
    
    return True

def update_gitignore():
    """Ensure .env is in .gitignore."""
    
    gitignore_path = Path(".gitignore")
    gitignore_content = ""
    
    if gitignore_path.exists():
        with open(gitignore_path, "r") as f:
            gitignore_content = f.read()
    
    # Check if .env is already ignored
    if ".env" not in gitignore_content:
        print("üìù Adding .env to .gitignore for security...")
        
        gitignore_additions = """
# Environment variables - contains sensitive API keys
.env
.env.local
.env.*.local

# Logs
*.log
logs/

# Results that might contain sensitive data
results/alignment_sprint.log
"""
        
        with open(".gitignore", "a") as f:
            f.write(gitignore_additions)
        
        print("‚úÖ Updated .gitignore to protect sensitive files")
    else:
        print("‚úÖ .gitignore already protects .env files")

def test_configuration():
    """Test if the configuration works."""
    
    print("\nüß™ Testing configuration...")
    
    try:
        # Import and test config
        sys.path.insert(0, 'src')
        from config import OPENAI_API_KEY, print_config_summary
        
        print_config_summary()
        
        # Test OpenAI connection
        try:
            from openai import OpenAI
            client = OpenAI(api_key=OPENAI_API_KEY)
            
            # Make a simple test call
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "Say 'Configuration test successful!'"}],
                max_tokens=10
            )
            
            print("‚úÖ OpenAI API connection successful!")
            print(f"   Response: {response.choices[0].message.content}")
            
        except Exception as e:
            print(f"‚ùå OpenAI API test failed: {e}")
            print("   Please check your API key and internet connection.")
            return False
            
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False
    
    return True

def main():
    """Main setup function."""
    
    # Change to script directory first
    script_dir = Path(__file__).parent
    os.chdir(script_dir)
    
    print("Starting setup...")
    
    # Step 1: Create .env file
    if not create_env_file():
        sys.exit(1)
    
    # Step 2: Update .gitignore
    update_gitignore()
    
    # Step 3: Test configuration
    if not test_configuration():
        print("\n‚ö†Ô∏è  Configuration test failed. Please check your API key.")
        sys.exit(1)
    
    print("\nüéâ Setup Complete!")
    print("=" * 40)
    print("Your meditation AI alignment sprint is ready to run!")
    print()
    print("Next steps:")
    print("1. Run: python run_alignment_sprint.py")
    print("2. Or run individual components from the src/ directory")
    print()
    print("Security reminder:")
    print("- Your .env file contains your API key and should never be shared")
    print("- The .env file is automatically ignored by git")
    print("- If you need to regenerate your API key, visit: https://platform.openai.com/api-keys")

if __name__ == "__main__":
    main() 